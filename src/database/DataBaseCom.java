
package database;

import java.sql.*;
/***
 * This is the class containing methods and information required to connect to a database.
 * It contains 2 major parts: the connection object and the Statement.
 * While the connection maintains a link to the database, the Statement
 * is responsible for any concrete communication. It's also through the statement
 * that results from the database are passed.
 * It should be noted that the connection does not close itself automatically, therefore
 * every time the usage is done one should call the close().
 * @author STAHL7
 */
public class DataBaseCom {
    private Connection conn;
    private Statement dbStatement;
    
    /**
     * The basic constructor for DataBaseCom. Constructs the object and 
     * opens the connection to the database.
     */
    public DataBaseCom() 
           
    {        
            openDb();
    }
        
    /**
     * The method which opens the connection to the database. This method contains information
     * about the login needed to connect aswell. 
     * If the connection fails for some reason, the method will print out some
     * error information in the terminal.
     */
    private void openDb()
    {
        try {   
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection
            ("jdbc:mysql://mysql.itu.dk/BGPP_1", "msta", "trololo");
             dbStatement = conn.createStatement();
        }
        catch (SQLException exn) {
            System.out.println("The database connection cannot be opened");
        }  catch (ClassNotFoundException exn) {
            System.out.println("There was an error finding the connected Java driver." + exn);
        }
    }
    /**
     * This method closes and re-opens the connection to the database.
     */
    public void reboot()
    {
        close();
        openDb();
               
    }
    /**
     * This method closes the database. If this fails, the method 
     * will print out some error information in the terminal.
     */
    public void close()
    {
        try {
            conn.close();
       }
        catch(SQLException exn) {
            System.out.println("The connection could not be closed: " + exn);
        }
    
    }
    /**
     * This method is used for editing and deleting information in the database.
     * The query passed to this method must be valid SQL syntax.
     * If this fails the method will print out some error information in the terminal.
     * @param query Some valid SQL syntax for editing or deleting entries in the database.
     * @return boolean True if the query was successful, false if the query failed
     * @throws SQLException if the query fails.
     */
    public boolean update(String query) throws SQLException
    { 
    	
    		dbStatement.execute(query);
    		return true;
    	  
    }
    /**
     * This method is used for retrieving information from the database as ResultSets.
     * Note that this method uses a different query from the others - a query that can
     * ONLY receive 'retrieval' commands.
     * @param query Some valid SQL syntax for retrieving information from the database.
     * @return ResultSet a ResultSet containing the information contained.
     * @throws SQLException if the query fails
     */
    public ResultSet get(String query) throws SQLException
    {
            dbStatement.executeQuery(query);
            return dbStatement.getResultSet();         
    }
    /**
     * This method is used when creating posts in a table in the database.
     * The method will take in a query and ask for any auto generated keys.
     * If the query fails some error information will be printed in the terminal.
     * @param query Some valid SQL syntax for creating tables or posts in the database.
     * @return ResultSet a ResultSet containing any autogenerated keys.
     * @throws SQLException if  the query fails
     */
   @SuppressWarnings("static-access")
public ResultSet create(String query) throws SQLException
    {
    		dbStatement.executeUpdate(query, dbStatement.RETURN_GENERATED_KEYS);
    		ResultSet res = dbStatement.getGeneratedKeys();
    		return res;
    }
    
    
    
    
}